#                   
# This source file is part of the Collector-Analyst-Presenter Example open source project
# 
# SPDX-FileCopyrightText: 2021 Paul Schmiedmayer and the project authors (see CONTRIBUTORS.md) <paul.schmiedmayer@tum.de>
# 
# SPDX-License-Identifier: MIT
# 

name: Build and Test

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
  workflow_dispatch:

jobs:
  macosclient:
    name: macOS Client
    runs-on: macos-11
    steps:
    - uses: actions/checkout@v2
    - uses: maxim-lobanov/setup-xcode@v1.1
      with:
        xcode-version: latest-stable
    - name: Check Xcode version
      run: xcodebuild -version
    - name: Check Swift version
      run: swift --version
    - name: Build and test
      run: xcodebuild test -scheme Example -destination 'platform=iOS Simulator,name=iPhone 13'
  # macoswebservices:
  #   name: macOS ${{ matrix.webservice }} ${{ matrix.configuration }}
  #   runs-on: macos-11
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       webservice: [Gateway, Database, Processing]
  #       configuration: [debug, release]
  #   defaults:
  #     run:
  #       working-directory: ./${{ matrix.webservice }}
  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: maxim-lobanov/setup-xcode@v1.2.3
  #     with:
  #       xcode-version: latest-stable
  #   - uses: actions/cache@v2
  #     with:
  #       path: .build
  #       key: ${{ runner.os }}-${{ matrix.webservice }}-spm-${{ hashFiles('**/Package.resolved') }}
  #   - name: Check Xcode version
  #     run: xcodebuild -version
  #   - name: Check Swift version
  #     run: swift --version
  #   - name: Release Build
  #     if: matrix.configuration == 'release'
  #     run: swift build -c release
  #   - name: Debug Build
  #     if: matrix.configuration == 'debug'
  #     run: swift build -c debug
  # linuxwebservices:
  #   name: Linux ${{ matrix.webservice }} ${{ matrix.linux }} ${{ matrix.configuration }}
  #   runs-on: ubuntu-latest
  #   container:
  #     image: swiftlang/swift:nightly-5.5-${{ matrix.linux }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       webservice: [Gateway, Database, Processing]
  #       linux: [bionic, focal, amazonlinux2, centos8]
  #       configuration: [debug, release, release_testing]
  #   defaults:
  #     run:
  #       working-directory: ./${{ matrix.webservice }}
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Install libsqlite3
  #     if: ${{ !(startsWith( matrix.linux, 'centos' ) || startsWith( matrix.linux, 'amazonlinux' )) }}
  #     run: apt-get update && apt-get install -y --no-install-recommends libsqlite3-dev
  #   - name: Install libsqlite3
  #     if: startsWith( matrix.linux, 'amazonlinux' )
  #     run: yum update -y && yum install -y sqlite-devel
  #   - name: Install libsqlite3
  #     if: startsWith( matrix.linux, 'centos' )
  #     run: yum update -y --nobest && yum install -y sqlite-devel
  #   - uses: actions/cache@v2
  #     with:
  #       path: .build
  #       key: ${{ runner.os }}-${{matrix.linux}}-${{ matrix.webservice }}-spm-${{ hashFiles('Package.resolved') }}
  #   - name: Check Swift version
  #     run: swift --version
  #   - name: Release Build
  #     if: matrix.configuration == 'release'
  #     run: swift build -c release
  #   - name: Release Build & Test
  #     if: matrix.configuration == 'release_testing'
  #     run: swift test -c release -Xswiftc -enable-testing
  #   - name: Debug Build & Test
  #     if: matrix.configuration == 'debug'
  #     run: swift test -c debug
